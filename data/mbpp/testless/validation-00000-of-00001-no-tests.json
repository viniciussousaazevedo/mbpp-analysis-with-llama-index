{
    "list": [
        {
            "task_id": 511,
            "text": "Write a python function to find minimum sum of factors of a given number.",
            "code": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
        },
        {
            "task_id": 512,
            "text": "Write a function to count the element frequency in the mixed nested tuple.",
            "code": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
        },
        {
            "task_id": 513,
            "text": "Write a function to convert tuple into list by adding the given string after every element.",
            "code": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
        },
        {
            "task_id": 514,
            "text": "Write a function to find the summation of tuple elements in the given tuple list.",
            "code": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
        },
        {
            "task_id": 515,
            "text": "Write a function to check if there is a subset with sum divisible by m.",
            "code": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
        },
        {
            "task_id": 516,
            "text": "Write a function to sort a list of elements using radix sort.",
            "code": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
        },
        {
            "task_id": 517,
            "text": "Write a python function to find the largest postive number from the given list.",
            "code": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
        },
        {
            "task_id": 518,
            "text": "Write a function to find the square root of a perfect number.",
            "code": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
        },
        {
            "task_id": 519,
            "text": "Write a function to calculate volume of a tetrahedron.",
            "code": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
        },
        {
            "task_id": 520,
            "text": "Write a function to find the lcm of the given array elements.",
            "code": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
        },
        {
            "task_id": 521,
            "text": "Write a function to print check if the triangle is scalene or not.",
            "code": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
        },
        {
            "task_id": 522,
            "text": "Write a function to find the longest bitonic subsequence for the given array.",
            "code": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
        },
        {
            "task_id": 523,
            "text": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
            "code": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
        },
        {
            "task_id": 524,
            "text": "Write a function to find the sum of maximum increasing subsequence of the given array.",
            "code": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
        },
        {
            "task_id": 525,
            "text": "Write a python function to check whether two given lines are parallel or not.",
            "code": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
        },
        {
            "task_id": 526,
            "text": "Write a python function to capitalize first and last letters of each word of a given string.",
            "code": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
        },
        {
            "task_id": 527,
            "text": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
            "code": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
        },
        {
            "task_id": 528,
            "text": "Write a function to find the list of lists with minimum length.",
            "code": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
        },
        {
            "task_id": 529,
            "text": "Write a function to find the nth jacobsthal-lucas number.",
            "code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
        },
        {
            "task_id": 530,
            "text": "Write a function to find the ration of negative numbers in an array of integers.",
            "code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
        },
        {
            "task_id": 531,
            "text": "Write a function to find minimum number of coins that make a given value.",
            "code": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
        },
        {
            "task_id": 532,
            "text": "Write a function to check if the two given strings are permutations of each other.",
            "code": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
        },
        {
            "task_id": 533,
            "text": "Write a function to remove particular data type elements from the given tuple.",
            "code": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
        },
        {
            "task_id": 534,
            "text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
            "code": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
        },
        {
            "task_id": 535,
            "text": "Write a function to find the top or bottom surface area of a cylinder.",
            "code": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
        },
        {
            "task_id": 536,
            "text": "Write a function to select the nth items of a list.",
            "code": "def nth_items(list,n):\r\n return list[::n]"
        },
        {
            "task_id": 537,
            "text": "Write a python function to find the first repeated word in a given string.",
            "code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
        },
        {
            "task_id": 538,
            "text": "Write a python function to convert a given string list to a tuple.",
            "code": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
        },
        {
            "task_id": 539,
            "text": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
            "code": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
        },
        {
            "task_id": 540,
            "text": "Write a python function to find the difference between highest and least frequencies in a given array.",
            "code": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
        },
        {
            "task_id": 541,
            "text": "Write a function to find if the given number is abundant or not.",
            "code": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
        },
        {
            "task_id": 542,
            "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
            "code": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
        },
        {
            "task_id": 543,
            "text": "Write a function to add two numbers and print number of digits of sum.",
            "code": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
        },
        {
            "task_id": 544,
            "text": "Write a function to flatten the tuple list to a string.",
            "code": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
        },
        {
            "task_id": 545,
            "text": "Write a python function to toggle only first and last bits of a given number.",
            "code": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
        },
        {
            "task_id": 546,
            "text": "Write a function to find the last occurrence of a character in a string.",
            "code": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
        },
        {
            "task_id": 547,
            "text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
            "code": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
        },
        {
            "task_id": 548,
            "text": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
            "code": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
        },
        {
            "task_id": 549,
            "text": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
            "code": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
        },
        {
            "task_id": 550,
            "text": "Write a python function to find the maximum element in a sorted and rotated array.",
            "code": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
        },
        {
            "task_id": 551,
            "text": "Write a function to extract a specified column from a given nested list.",
            "code": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
        },
        {
            "task_id": 552,
            "text": "Write a python function to check whether a given sequence is linear or not.",
            "code": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
        },
        {
            "task_id": 553,
            "text": "Write a function to convert the given tuple to a floating-point number.",
            "code": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
        },
        {
            "task_id": 554,
            "text": "Write a python function to find odd numbers from a mixed list.",
            "code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
        },
        {
            "task_id": 555,
            "text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
            "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
        },
        {
            "task_id": 556,
            "text": "Write a python function to count the pairs with xor as an odd number.",
            "code": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
        },
        {
            "task_id": 557,
            "text": "Write a function to toggle characters case in a string.",
            "code": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
        },
        {
            "task_id": 558,
            "text": "Write a python function to find the digit distance between two integers.",
            "code": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
        },
        {
            "task_id": 559,
            "text": "Write a function to find the largest sum of contiguous subarray in the given array.",
            "code": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
        },
        {
            "task_id": 560,
            "text": "Write a function to find the union of elements of the given tuples.",
            "code": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 561,
            "text": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
            "code": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
        },
        {
            "task_id": 562,
            "text": "Write a python function to find the maximum length of sublist.",
            "code": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
        },
        {
            "task_id": 563,
            "text": "Write a function to extract values between quotation marks of a string.",
            "code": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
        },
        {
            "task_id": 564,
            "text": "Write a python function to count unequal element pairs from the given array.",
            "code": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
        },
        {
            "task_id": 565,
            "text": "Write a python function to split a string into characters.",
            "code": "def split(word): \r\n    return [char for char in word] "
        },
        {
            "task_id": 566,
            "text": "Write a function to get the sum of a non-negative integer.",
            "code": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
        },
        {
            "task_id": 567,
            "text": "Write a function to check whether a specified list is sorted or not.",
            "code": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
        },
        {
            "task_id": 568,
            "text": "Write a function to create a list of empty dictionaries.",
            "code": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
        },
        {
            "task_id": 569,
            "text": "Write a function to sort each sublist of strings in a given list of lists.",
            "code": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
        },
        {
            "task_id": 570,
            "text": "Write a function to remove words from a given list of strings containing a character or string.",
            "code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
        },
        {
            "task_id": 571,
            "text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
            "code": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
        },
        {
            "task_id": 572,
            "text": "Write a python function to remove two duplicate numbers from a given number of lists.",
            "code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
        },
        {
            "task_id": 573,
            "text": "Write a python function to calculate the product of the unique numbers of a given list.",
            "code": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
        },
        {
            "task_id": 574,
            "text": "Write a function to find the surface area of a cylinder.",
            "code": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
        },
        {
            "task_id": 575,
            "text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
            "code": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
        },
        {
            "task_id": 576,
            "text": "Write a python function to check whether an array is subarray of another or not.",
            "code": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
        },
        {
            "task_id": 577,
            "text": "Write a python function to find the last digit in factorial of a given number.",
            "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
        },
        {
            "task_id": 578,
            "text": "Write a function to interleave lists of the same length.",
            "code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
        },
        {
            "task_id": 579,
            "text": "Write a function to find the dissimilar elements in the given two tuples.",
            "code": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 580,
            "text": "Write a function to extract the even elements in the nested mixed tuple.",
            "code": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
        },
        {
            "task_id": 581,
            "text": "Write a python function to find the surface area of the square pyramid.",
            "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
        },
        {
            "task_id": 582,
            "text": "Write a function to check if a dictionary is empty or not.",
            "code": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
        },
        {
            "task_id": 583,
            "text": "Write a function for nth catalan number.",
            "code": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
        },
        {
            "task_id": 584,
            "text": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
            "code": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
        },
        {
            "task_id": 585,
            "text": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
            "code": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
        },
        {
            "task_id": 586,
            "text": "Write a python function to split the array and add the first part to the end.",
            "code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
        },
        {
            "task_id": 587,
            "text": "Write a function to convert a list to a tuple.",
            "code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
        },
        {
            "task_id": 588,
            "text": "Write a python function to find the difference between largest and smallest value in a given array.",
            "code": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
        },
        {
            "task_id": 589,
            "text": "Write a function to find perfect squares between two given numbers.",
            "code": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
        },
        {
            "task_id": 590,
            "text": "Write a function to convert polar coordinates to rectangular coordinates.",
            "code": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
        },
        {
            "task_id": 591,
            "text": "Write a python function to interchange the first and last elements in a list.",
            "code": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
        },
        {
            "task_id": 592,
            "text": "Write a python function to find sum of product of binomial co-efficients.",
            "code": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
        },
        {
            "task_id": 593,
            "text": "Write a function to remove leading zeroes from an ip address.",
            "code": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
        },
        {
            "task_id": 594,
            "text": "Write a function to find the difference of first even and odd number of a given list.",
            "code": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
        },
        {
            "task_id": 595,
            "text": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
            "code": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
        },
        {
            "task_id": 596,
            "text": "Write a function to find the size of the given tuple.",
            "code": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
        },
        {
            "task_id": 597,
            "text": "Write a function to find kth element from the given two sorted arrays.",
            "code": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
        },
        {
            "task_id": 598,
            "text": "Write a function to check whether the given number is armstrong or not.",
            "code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
        },
        {
            "task_id": 599,
            "text": "Write a function to find sum and average of first n natural numbers.",
            "code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
        },
        {
            "task_id": 600,
            "text": "Write a python function to check whether the given number is even or not using bitwise operator.",
            "code": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
        }
    ]
}