{
    "list": [
        {
            "task_id": 11,
            "text": "Write a python function to remove first and last occurrence of a given character from the string.",
            "code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
        },
        {
            "task_id": 12,
            "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
            "code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
        },
        {
            "task_id": 13,
            "text": "Write a function to count the most common words in a dictionary.",
            "code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
        },
        {
            "task_id": 14,
            "text": "Write a python function to find the volume of a triangular prism.",
            "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
        },
        {
            "task_id": 15,
            "text": "Write a function to split a string at lowercase letters.",
            "code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
        },
        {
            "task_id": 16,
            "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
            "code": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
        },
        {
            "task_id": 17,
            "text": "Write a function to find the perimeter of a square.",
            "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
        },
        {
            "task_id": 18,
            "text": "Write a function to remove characters from the first string which are present in the second string.",
            "code": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
        },
        {
            "task_id": 19,
            "text": "Write a function to find whether a given array of integers contains any duplicate element.",
            "code": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
        },
        {
            "task_id": 20,
            "text": "Write a function to check if the given number is woodball or not.",
            "code": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
        },
        {
            "task_id": 21,
            "text": "Write a function to find m number of multiples of n.",
            "code": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
        },
        {
            "task_id": 22,
            "text": "Write a function to find the first duplicate element in a given array of integers.",
            "code": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
        },
        {
            "task_id": 23,
            "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
            "code": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
        },
        {
            "task_id": 24,
            "text": "Write a function to convert the given binary number to its decimal equivalent.",
            "code": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
        },
        {
            "task_id": 25,
            "text": "Write a python function to find the product of non-repeated elements in a given array.",
            "code": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
        },
        {
            "task_id": 26,
            "text": "Write a function to check if the given tuple list has all k elements.",
            "code": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
        },
        {
            "task_id": 27,
            "text": "Write a python function to remove all digits from a list of strings.",
            "code": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
        },
        {
            "task_id": 28,
            "text": "Write a python function to find binomial co-efficient.",
            "code": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
        },
        {
            "task_id": 29,
            "text": "Write a python function to find the element occurring odd number of times.",
            "code": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
        },
        {
            "task_id": 30,
            "text": "Write a python function to count all the substrings starting and ending with same characters.",
            "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
        },
        {
            "task_id": 31,
            "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
            "code": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
        },
        {
            "task_id": 32,
            "text": "Write a python function to find the largest prime factor of a given number.",
            "code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
        },
        {
            "task_id": 33,
            "text": "Write a python function to convert a decimal number to binary number.",
            "code": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
        },
        {
            "task_id": 34,
            "text": "Write a python function to find the missing number in a sorted array.",
            "code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
        },
        {
            "task_id": 35,
            "text": "Write a function to find the n-th rectangular number.",
            "code": "def find_rect_num(n):\r\n  return n*(n + 1) "
        },
        {
            "task_id": 36,
            "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
            "code": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
        },
        {
            "task_id": 37,
            "text": "Write a function to sort a given mixed list of integers and strings.",
            "code": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
        },
        {
            "task_id": 38,
            "text": "Write a function to find the division of first even and odd number of a given list.",
            "code": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
        },
        {
            "task_id": 39,
            "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
            "code": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
        },
        {
            "task_id": 40,
            "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
            "code": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
        },
        {
            "task_id": 41,
            "text": "Write a function to filter even numbers using lambda function.",
            "code": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
        },
        {
            "task_id": 42,
            "text": "Write a python function to find the sum of repeated elements in a given array.",
            "code": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
        },
        {
            "task_id": 43,
            "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
            "code": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
        },
        {
            "task_id": 44,
            "text": "Write a function that matches a word at the beginning of a string.",
            "code": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
        },
        {
            "task_id": 45,
            "text": "Write a function to find the gcd of the given array elements.",
            "code": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
        },
        {
            "task_id": 46,
            "text": "Write a python function to determine whether all the numbers are different from each other are not.",
            "code": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
        },
        {
            "task_id": 47,
            "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
            "code": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
        },
        {
            "task_id": 48,
            "text": "Write a python function to set all odd bits of a given number.",
            "code": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
        },
        {
            "task_id": 49,
            "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
            "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
        },
        {
            "task_id": 50,
            "text": "Write a function to find the list with minimum length using lambda function.",
            "code": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
        },
        {
            "task_id": 51,
            "text": "Write a function to print check if the triangle is equilateral or not.",
            "code": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
        },
        {
            "task_id": 52,
            "text": "Write a function to caluclate area of a parallelogram.",
            "code": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
        },
        {
            "task_id": 53,
            "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
            "code": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
        },
        {
            "task_id": 54,
            "text": "Write a function to sort the given array by using counting sort.",
            "code": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
        },
        {
            "task_id": 55,
            "text": "Write a function to find t-nth term of geometric series.",
            "code": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
        },
        {
            "task_id": 56,
            "text": "Write a python function to check if a given number is one less than twice its reverse.",
            "code": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
        },
        {
            "task_id": 57,
            "text": "Write a python function to find the largest number that can be formed with the given digits.",
            "code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
        },
        {
            "task_id": 58,
            "text": "Write a python function to check whether the given two integers have opposite sign or not.",
            "code": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
        },
        {
            "task_id": 59,
            "text": "Write a function to find the nth octagonal number.",
            "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
        },
        {
            "task_id": 60,
            "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
            "code": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
        },
        {
            "task_id": 61,
            "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
            "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
        },
        {
            "task_id": 62,
            "text": "Write a python function to find smallest number in a list.",
            "code": "def smallest_num(xs):\n  return min(xs)\n"
        },
        {
            "task_id": 63,
            "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
            "code": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
        },
        {
            "task_id": 64,
            "text": "Write a function to sort a list of tuples using lambda.",
            "code": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
        },
        {
            "task_id": 65,
            "text": "Write a function of recursion list sum.",
            "code": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
        },
        {
            "task_id": 66,
            "text": "Write a python function to count positive numbers in a list.",
            "code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
        },
        {
            "task_id": 67,
            "text": "Write a function to find the number of ways to partition a set of bell numbers.",
            "code": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
        },
        {
            "task_id": 68,
            "text": "Write a python function to check whether the given array is monotonic or not.",
            "code": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
        },
        {
            "task_id": 69,
            "text": "Write a function to check whether a list contains the given sublist or not.",
            "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
        },
        {
            "task_id": 70,
            "text": "Write a function to find whether all the given tuples have equal length or not.",
            "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
        },
        {
            "task_id": 71,
            "text": "Write a function to sort a list of elements using comb sort.",
            "code": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
        },
        {
            "task_id": 72,
            "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
            "code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
        },
        {
            "task_id": 73,
            "text": "Write a function to split the given string with multiple delimiters by using regex.",
            "code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
        },
        {
            "task_id": 74,
            "text": "Write a function to check whether it follows the sequence given in the patterns array.",
            "code": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
        },
        {
            "task_id": 75,
            "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
            "code": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
        },
        {
            "task_id": 76,
            "text": "Write a python function to count the number of squares in a rectangle.",
            "code": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
        },
        {
            "task_id": 77,
            "text": "Write a python function to find the difference between sum of even and odd digits.",
            "code": "def is_Diff(n): \r\n    return (n % 11 == 0) "
        },
        {
            "task_id": 78,
            "text": "Write a python function to find number of integers with odd number of set bits.",
            "code": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
        },
        {
            "task_id": 79,
            "text": "Write a python function to check whether the length of the word is odd or not.",
            "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
        },
        {
            "task_id": 80,
            "text": "Write a function to find the nth tetrahedral number.",
            "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
        },
        {
            "task_id": 81,
            "text": "Write a function to zip the two given tuples.",
            "code": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
        },
        {
            "task_id": 82,
            "text": "Write a function to find the volume of a sphere.",
            "code": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
        },
        {
            "task_id": 83,
            "text": "Write a python function to find the character made by adding all the characters of the given string.",
            "code": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
        },
        {
            "task_id": 84,
            "text": "Write a function to find the n-th number in newman conway sequence.",
            "code": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
        },
        {
            "task_id": 85,
            "text": "Write a function to find the surface area of a sphere.",
            "code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
        },
        {
            "task_id": 86,
            "text": "Write a function to find nth centered hexagonal number.",
            "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
        },
        {
            "task_id": 87,
            "text": "Write a function to merge three dictionaries into a single expression.",
            "code": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
        },
        {
            "task_id": 88,
            "text": "Write a function to get the frequency of the elements in a list.",
            "code": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
        },
        {
            "task_id": 89,
            "text": "Write a function to find the closest smaller number than n.",
            "code": "def closest_num(N):\r\n  return (N - 1)"
        },
        {
            "task_id": 90,
            "text": "Write a python function to find the length of the longest word.",
            "code": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
        },
        {
            "task_id": 91,
            "text": "Write a function to check if a substring is present in a given list of string values.",
            "code": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
        },
        {
            "task_id": 92,
            "text": "Write a function to check whether the given number is undulating or not.",
            "code": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
        },
        {
            "task_id": 93,
            "text": "Write a function to calculate the value of 'a' to the power 'b'.",
            "code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
        },
        {
            "task_id": 94,
            "text": "Write a function to extract the index minimum value record from the given tuples.",
            "code": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
        },
        {
            "task_id": 95,
            "text": "Write a python function to find the minimum length of sublist.",
            "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
        },
        {
            "task_id": 96,
            "text": "Write a python function to find the number of divisors of a given integer.",
            "code": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
        },
        {
            "task_id": 97,
            "text": "Write a function to find frequency count of list of lists.",
            "code": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
        },
        {
            "task_id": 98,
            "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
            "code": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
        },
        {
            "task_id": 99,
            "text": "Write a function to convert the given decimal number to its binary equivalent.",
            "code": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
        },
        {
            "task_id": 100,
            "text": "Write a function to find the next smallest palindrome of a specified number.",
            "code": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
        },
        {
            "task_id": 101,
            "text": "Write a function to find the kth element in the given array.",
            "code": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
        },
        {
            "task_id": 102,
            "text": "Write a function to convert snake case string to camel case string.",
            "code": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        },
        {
            "task_id": 103,
            "text": "Write a function to find eulerian number a(n, m).",
            "code": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
        },
        {
            "task_id": 104,
            "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
            "code": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
        },
        {
            "task_id": 105,
            "text": "Write a python function to count true booleans in the given list.",
            "code": "def count(lst):   \r\n    return sum(lst) "
        },
        {
            "task_id": 106,
            "text": "Write a function to add the given list to the given tuples.",
            "code": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
        },
        {
            "task_id": 107,
            "text": "Write a python function to count hexadecimal numbers for a given range.",
            "code": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
        },
        {
            "task_id": 108,
            "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
            "code": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
        },
        {
            "task_id": 109,
            "text": "Write a python function to find the count of rotations of a binary string with odd value.",
            "code": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
        },
        {
            "task_id": 110,
            "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
            "code": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
        },
        {
            "task_id": 111,
            "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
            "code": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
        },
        {
            "task_id": 112,
            "text": "Write a python function to find the perimeter of a cylinder.",
            "code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
        },
        {
            "task_id": 113,
            "text": "Write a function to check if a string represents an integer or not.",
            "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
        },
        {
            "task_id": 114,
            "text": "Write a function to assign frequency to each tuple in the given tuple list.",
            "code": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
        },
        {
            "task_id": 115,
            "text": "Write a function to check whether all dictionaries in a list are empty or not.",
            "code": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
        },
        {
            "task_id": 116,
            "text": "Write a function to convert a given tuple of positive integers into an integer.",
            "code": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
        },
        {
            "task_id": 117,
            "text": "Write a function to convert all possible convertible elements in the list to float.",
            "code": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
        },
        {
            "task_id": 118,
            "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
            "code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
        },
        {
            "task_id": 119,
            "text": "Write a python function to find the element that appears only once in a sorted array.",
            "code": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
        },
        {
            "task_id": 120,
            "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
            "code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
        },
        {
            "task_id": 121,
            "text": "Write a function to find the triplet with sum of the given array",
            "code": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
        },
        {
            "task_id": 122,
            "text": "Write a function to find n\u00e2\u20ac\u2122th smart number.",
            "code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
        },
        {
            "task_id": 123,
            "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
            "code": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
        },
        {
            "task_id": 124,
            "text": "Write a function to get the angle of a complex number.",
            "code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
        },
        {
            "task_id": 125,
            "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
            "code": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
        },
        {
            "task_id": 126,
            "text": "Write a python function to find the sum of common divisors of two given numbers.",
            "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
        },
        {
            "task_id": 127,
            "text": "Write a function to multiply two integers without using the * operator in python.",
            "code": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
        },
        {
            "task_id": 128,
            "text": "Write a function to shortlist words that are longer than n from a given list of words.",
            "code": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
        },
        {
            "task_id": 129,
            "text": "Write a function to calculate magic square.",
            "code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
        },
        {
            "task_id": 130,
            "text": "Write a function to find the item with maximum frequency in a given list.",
            "code": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
        },
        {
            "task_id": 131,
            "text": "Write a python function to reverse only the vowels of a given string.",
            "code": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
        },
        {
            "task_id": 132,
            "text": "Write a function to convert tuple to a string.",
            "code": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
        },
        {
            "task_id": 133,
            "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
            "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
        },
        {
            "task_id": 134,
            "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
            "code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
        },
        {
            "task_id": 135,
            "text": "Write a function to find the nth hexagonal number.",
            "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
        },
        {
            "task_id": 136,
            "text": "Write a function to calculate electricity bill.",
            "code": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
        },
        {
            "task_id": 137,
            "text": "Write a function to find the ration of zeroes in an array of integers.",
            "code": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
        },
        {
            "task_id": 138,
            "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
            "code": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
        },
        {
            "task_id": 139,
            "text": "Write a function to find the circumference of a circle.",
            "code": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
        },
        {
            "task_id": 140,
            "text": "Write a function to extract elements that occur singly in the given tuple list.",
            "code": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
        },
        {
            "task_id": 141,
            "text": "Write a function to sort a list of elements using pancake sort.",
            "code": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
        },
        {
            "task_id": 142,
            "text": "Write a function to count the same pair in three given lists.",
            "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
        },
        {
            "task_id": 143,
            "text": "Write a function to find number of lists present in the given tuple.",
            "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
        },
        {
            "task_id": 144,
            "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
            "code": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
        },
        {
            "task_id": 145,
            "text": "Write a python function to find the maximum difference between any two elements in a given array.",
            "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
        },
        {
            "task_id": 146,
            "text": "Write a function to find the ascii value of total characters in a string.",
            "code": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
        },
        {
            "task_id": 147,
            "text": "Write a function to find the maximum total path sum in the given triangle.",
            "code": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
        },
        {
            "task_id": 148,
            "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
            "code": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
        },
        {
            "task_id": 149,
            "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
            "code": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
        },
        {
            "task_id": 150,
            "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
            "code": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
        },
        {
            "task_id": 151,
            "text": "Write a python function to check whether the given number is co-prime or not.",
            "code": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
        },
        {
            "task_id": 152,
            "text": "Write a function to sort the given array by using merge sort.",
            "code": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
        },
        {
            "task_id": 153,
            "text": "Write a function to find the vertex of a parabola.",
            "code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
        },
        {
            "task_id": 154,
            "text": "Write a function to extract every specified element from a given two dimensional list.",
            "code": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
        },
        {
            "task_id": 155,
            "text": "Write a python function to toggle all even bits of a given number.",
            "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
        },
        {
            "task_id": 156,
            "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
            "code": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
        },
        {
            "task_id": 157,
            "text": "Write a function to reflect the run-length encoding from a list.",
            "code": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
        },
        {
            "task_id": 158,
            "text": "Write a python function to find k number of operations required to make all elements equal.",
            "code": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
        },
        {
            "task_id": 159,
            "text": "Write a function to print the season for the given month and day.",
            "code": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
        },
        {
            "task_id": 160,
            "text": "Write a function to find x and y that satisfies ax + by = n.",
            "code": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
        },
        {
            "task_id": 161,
            "text": "Write a function to remove all elements from a given list present in another list.",
            "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
        },
        {
            "task_id": 162,
            "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
            "code": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
        },
        {
            "task_id": 163,
            "text": "Write a function to calculate the area of a regular polygon.",
            "code": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
        },
        {
            "task_id": 164,
            "text": "Write a python function to check whether the sum of divisors are same or not.",
            "code": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
        },
        {
            "task_id": 165,
            "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
            "code": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
        },
        {
            "task_id": 166,
            "text": "Write a python function to count the pairs with xor as an even number.",
            "code": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
        },
        {
            "task_id": 167,
            "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
            "code": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
        },
        {
            "task_id": 168,
            "text": "Write a python function to find the frequency of a number in a given array.",
            "code": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
        },
        {
            "task_id": 169,
            "text": "Write a function to calculate the nth pell number.",
            "code": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
        },
        {
            "task_id": 170,
            "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
            "code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
        },
        {
            "task_id": 171,
            "text": "Write a function to find the perimeter of a pentagon.",
            "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
        },
        {
            "task_id": 172,
            "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
            "code": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
        },
        {
            "task_id": 173,
            "text": "Write a function to remove everything except alphanumeric characters from a string.",
            "code": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
        },
        {
            "task_id": 174,
            "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
            "code": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
        },
        {
            "task_id": 175,
            "text": "Write a function to verify validity of a string of parentheses.",
            "code": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
        },
        {
            "task_id": 176,
            "text": "Write a function to find the perimeter of a triangle.",
            "code": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
        },
        {
            "task_id": 177,
            "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
            "code": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
        },
        {
            "task_id": 178,
            "text": "Write a function to search some literals strings in a string.",
            "code": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
        },
        {
            "task_id": 179,
            "text": "Write a function to find if the given number is a keith number or not.",
            "code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
        },
        {
            "task_id": 180,
            "text": "Write a function to calculate distance between two points using latitude and longitude.",
            "code": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
        },
        {
            "task_id": 181,
            "text": "Write a function to find the longest common prefix in the given set of strings.",
            "code": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
        },
        {
            "task_id": 182,
            "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
            "code": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
        },
        {
            "task_id": 183,
            "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
            "code": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
        },
        {
            "task_id": 184,
            "text": "Write a function to find all the values in a list that are greater than a specified number.",
            "code": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
        },
        {
            "task_id": 185,
            "text": "Write a function to find the focus of a parabola.",
            "code": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
        },
        {
            "task_id": 186,
            "text": "Write a function to search some literals strings in a string by using regex.",
            "code": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
        },
        {
            "task_id": 187,
            "text": "Write a function to find the longest common subsequence for the given two sequences.",
            "code": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
        },
        {
            "task_id": 188,
            "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
            "code": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
        },
        {
            "task_id": 189,
            "text": "Write a python function to find the first missing positive number.",
            "code": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
        },
        {
            "task_id": 190,
            "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
            "code": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
        },
        {
            "task_id": 191,
            "text": "Write a function to check whether the given month name contains 30 days or not.",
            "code": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
        },
        {
            "task_id": 192,
            "text": "Write a python function to check whether a string has atleast one letter and one number.",
            "code": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
        },
        {
            "task_id": 193,
            "text": "Write a function to remove the duplicates from the given tuple.",
            "code": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
        },
        {
            "task_id": 194,
            "text": "Write a python function to convert octal number to decimal number.",
            "code": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
        },
        {
            "task_id": 195,
            "text": "Write a python function to find the first position of an element in a sorted array.",
            "code": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
        },
        {
            "task_id": 196,
            "text": "Write a function to remove all the tuples with length k.",
            "code": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
        },
        {
            "task_id": 197,
            "text": "Write a function to perform the exponentiation of the given two tuples.",
            "code": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
        },
        {
            "task_id": 198,
            "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
            "code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
        },
        {
            "task_id": 199,
            "text": "Write a python function to find highest power of 2 less than or equal to given number.",
            "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
        },
        {
            "task_id": 200,
            "text": "Write a function to find all index positions of the maximum values in a given list.",
            "code": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
        },
        {
            "task_id": 201,
            "text": "Write a python function to check whether the elements in a list are same or not.",
            "code": "def chkList(lst): \r\n    return len(set(lst)) == 1"
        },
        {
            "task_id": 202,
            "text": "Write a function to remove even characters in a string.",
            "code": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
        },
        {
            "task_id": 203,
            "text": "Write a python function to find the hamming distance between given two integers.",
            "code": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
        },
        {
            "task_id": 204,
            "text": "Write a python function to count the occurrence of a given character in a string.",
            "code": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
        },
        {
            "task_id": 205,
            "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
            "code": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
        },
        {
            "task_id": 206,
            "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
            "code": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
        },
        {
            "task_id": 207,
            "text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u00e2\u20ac\u2122t have same string characters at same positions.",
            "code": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
        },
        {
            "task_id": 208,
            "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
            "code": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
        },
        {
            "task_id": 209,
            "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
            "code": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
        },
        {
            "task_id": 210,
            "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
            "code": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
        },
        {
            "task_id": 211,
            "text": "Write a python function to count numbers whose oth and nth bits are set.",
            "code": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
        },
        {
            "task_id": 212,
            "text": "Write a python function to find the sum of fourth power of n natural numbers.",
            "code": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
        },
        {
            "task_id": 213,
            "text": "Write a function to perform the concatenation of two string tuples.",
            "code": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 214,
            "text": "Write a function to convert radians to degrees.",
            "code": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
        },
        {
            "task_id": 215,
            "text": "Write a function to decode a run-length encoded given list.",
            "code": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
        },
        {
            "task_id": 216,
            "text": "Write a function to check if a nested list is a subset of another nested list.",
            "code": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
        },
        {
            "task_id": 217,
            "text": "Write a python function to find the first repeated character in a given string.",
            "code": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
        },
        {
            "task_id": 218,
            "text": "Write a python function to find the minimum operations required to make two numbers equal.",
            "code": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
        },
        {
            "task_id": 219,
            "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
            "code": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
        },
        {
            "task_id": 220,
            "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
            "code": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
        },
        {
            "task_id": 221,
            "text": "Write a python function to find the first even number in a given list of numbers.",
            "code": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
        },
        {
            "task_id": 222,
            "text": "Write a function to check if all the elements in tuple have same data type or not.",
            "code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
        },
        {
            "task_id": 223,
            "text": "Write a function to check for majority element in the given sorted array.",
            "code": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
        },
        {
            "task_id": 224,
            "text": "Write a python function to count set bits of a given number.",
            "code": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
        },
        {
            "task_id": 225,
            "text": "Write a python function to find the minimum element in a sorted and rotated array.",
            "code": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
        },
        {
            "task_id": 226,
            "text": "Write a python function to remove the characters which have odd index values of a given string.",
            "code": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
        },
        {
            "task_id": 227,
            "text": "Write a function to find minimum of three numbers.",
            "code": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
        },
        {
            "task_id": 228,
            "text": "Write a python function to check whether all the bits are unset in the given range or not.",
            "code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
        },
        {
            "task_id": 229,
            "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
            "code": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
        },
        {
            "task_id": 230,
            "text": "Write a function to replace blank spaces with any character in a string.",
            "code": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
        },
        {
            "task_id": 231,
            "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
            "code": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
        },
        {
            "task_id": 232,
            "text": "Write a function to get the n largest items from a dataset.",
            "code": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
        },
        {
            "task_id": 233,
            "text": "Write a function to find the lateral surface area of a cylinder.",
            "code": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
        },
        {
            "task_id": 234,
            "text": "Write a function to find the volume of a cube.",
            "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
        },
        {
            "task_id": 235,
            "text": "Write a python function to set all even bits of a given number.",
            "code": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
        },
        {
            "task_id": 236,
            "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
            "code": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
        },
        {
            "task_id": 237,
            "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
            "code": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
        },
        {
            "task_id": 238,
            "text": "Write a python function to count number of non-empty substrings of a given string.",
            "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
        },
        {
            "task_id": 239,
            "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
            "code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
        },
        {
            "task_id": 240,
            "text": "Write a function to replace the last element of the list with another list.",
            "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
        },
        {
            "task_id": 241,
            "text": "Write a function to generate a 3d array having each element as '*'.",
            "code": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
        },
        {
            "task_id": 242,
            "text": "Write a function to count total characters in a string.",
            "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
        },
        {
            "task_id": 243,
            "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
            "code": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
        },
        {
            "task_id": 244,
            "text": "Write a python function to find the next perfect square greater than a given number.",
            "code": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
        },
        {
            "task_id": 245,
            "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
            "code": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
        },
        {
            "task_id": 246,
            "text": "Write a function for computing square roots using the babylonian method.",
            "code": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
        },
        {
            "task_id": 247,
            "text": "Write a function to find the longest palindromic subsequence in the given string.",
            "code": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
        },
        {
            "task_id": 248,
            "text": "Write a function to calculate the harmonic sum of n-1.",
            "code": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
        },
        {
            "task_id": 249,
            "text": "Write a function to find the intersection of two arrays using lambda function.",
            "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
        },
        {
            "task_id": 250,
            "text": "Write a python function to count the occcurences of an element in a tuple.",
            "code": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
        },
        {
            "task_id": 251,
            "text": "Write a function to insert an element before each element of a list.",
            "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
        },
        {
            "task_id": 252,
            "text": "Write a python function to convert complex numbers to polar coordinates.",
            "code": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
        },
        {
            "task_id": 253,
            "text": "Write a python function to count integers from a given list.",
            "code": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
        },
        {
            "task_id": 254,
            "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
            "code": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
        },
        {
            "task_id": 255,
            "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
            "code": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
        },
        {
            "task_id": 256,
            "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
            "code": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
        },
        {
            "task_id": 257,
            "text": "Write a function to swap two numbers.",
            "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
        },
        {
            "task_id": 258,
            "text": "Write a function to find number of odd elements in the given list using lambda function.",
            "code": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
        },
        {
            "task_id": 259,
            "text": "Write a function to maximize the given two tuples.",
            "code": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 260,
            "text": "Write a function to find the nth newman\u00e2\u20ac\u201cshanks\u00e2\u20ac\u201cwilliams prime number.",
            "code": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
        },
        {
            "task_id": 261,
            "text": "Write a function to perform mathematical division operation across the given tuples.",
            "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 262,
            "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
            "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
        },
        {
            "task_id": 263,
            "text": "Write a function to merge two dictionaries.",
            "code": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
        },
        {
            "task_id": 264,
            "text": "Write a function to calculate a dog's age in dog's years.",
            "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
        },
        {
            "task_id": 265,
            "text": "Write a function to split a list for every nth element.",
            "code": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
        },
        {
            "task_id": 266,
            "text": "Write a function to find the lateral surface area of a cube.",
            "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
        },
        {
            "task_id": 267,
            "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
            "code": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
        },
        {
            "task_id": 268,
            "text": "Write a function to find the n'th star number.",
            "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
        },
        {
            "task_id": 269,
            "text": "Write a function to find the ascii value of a character.",
            "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
        },
        {
            "task_id": 270,
            "text": "Write a python function to find the sum of even numbers at even positions.",
            "code": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
        },
        {
            "task_id": 271,
            "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
            "code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
        },
        {
            "task_id": 272,
            "text": "Write a function to perfom the rear element extraction from list of tuples records.",
            "code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
        },
        {
            "task_id": 273,
            "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
            "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 274,
            "text": "Write a python function to find sum of even index binomial coefficients.",
            "code": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
        },
        {
            "task_id": 275,
            "text": "Write a python function to find the position of the last removed element from the given array.",
            "code": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
        },
        {
            "task_id": 276,
            "text": "Write a function to find the volume of a cylinder.",
            "code": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
        },
        {
            "task_id": 277,
            "text": "Write a function to filter a dictionary based on values.",
            "code": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
        },
        {
            "task_id": 278,
            "text": "Write a function to find the element count that occurs before the record in the given tuple.",
            "code": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
        },
        {
            "task_id": 279,
            "text": "Write a function to find the nth decagonal number.",
            "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
        },
        {
            "task_id": 280,
            "text": "Write a function to search an element in the given array by using sequential search.",
            "code": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
        },
        {
            "task_id": 281,
            "text": "Write a python function to check if the elements of a given list are unique or not.",
            "code": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
        },
        {
            "task_id": 282,
            "text": "Write a function to substaract two lists using map and lambda function.",
            "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
        },
        {
            "task_id": 283,
            "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
            "code": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
        },
        {
            "task_id": 284,
            "text": "Write a function to check whether all items of a list are equal to a given string.",
            "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
        },
        {
            "task_id": 285,
            "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
            "code": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
        },
        {
            "task_id": 286,
            "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
            "code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
        },
        {
            "task_id": 287,
            "text": "Write a python function to find the sum of squares of first n even natural numbers.",
            "code": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
        },
        {
            "task_id": 288,
            "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
            "code": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
        },
        {
            "task_id": 289,
            "text": "Write a python function to calculate the number of odd days in a given year.",
            "code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
        },
        {
            "task_id": 290,
            "text": "Write a function to find the list of lists with maximum length.",
            "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
        },
        {
            "task_id": 291,
            "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
            "code": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
        },
        {
            "task_id": 292,
            "text": "Write a python function to find quotient of two numbers.",
            "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
        },
        {
            "task_id": 293,
            "text": "Write a function to find the third side of a right angled triangle.",
            "code": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
        },
        {
            "task_id": 294,
            "text": "Write a function to find the maximum value in a given heterogeneous list.",
            "code": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
        },
        {
            "task_id": 295,
            "text": "Write a function to return the sum of all divisors of a number.",
            "code": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
        },
        {
            "task_id": 296,
            "text": "Write a python function to count inversions in an array.",
            "code": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
        },
        {
            "task_id": 297,
            "text": "Write a function to flatten a given nested list structure.",
            "code": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
        },
        {
            "task_id": 298,
            "text": "Write a function to find the nested list elements which are present in another list.",
            "code": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
        },
        {
            "task_id": 299,
            "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
            "code": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
        },
        {
            "task_id": 300,
            "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
            "code": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
        },
        {
            "task_id": 301,
            "text": "Write a function to find the depth of a dictionary.",
            "code": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
        },
        {
            "task_id": 302,
            "text": "Write a python function to find the most significant bit number which is also a set bit.",
            "code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
        },
        {
            "task_id": 303,
            "text": "Write a python function to check whether the count of inversion of two types are same or not.",
            "code": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
        },
        {
            "task_id": 304,
            "text": "Write a python function to find element at a given index after number of rotations.",
            "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
        },
        {
            "task_id": 305,
            "text": "Write a function to match two words from a list of words starting with letter 'p'.",
            "code": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
        },
        {
            "task_id": 306,
            "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
            "code": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
        },
        {
            "task_id": 307,
            "text": "Write a function to get a colon of a tuple.",
            "code": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
        },
        {
            "task_id": 308,
            "text": "Write a function to find the specified number of largest products from two given lists.",
            "code": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
        },
        {
            "task_id": 309,
            "text": "Write a python function to find the maximum of two numbers.",
            "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
        },
        {
            "task_id": 310,
            "text": "Write a function to convert a given string to a tuple.",
            "code": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
        },
        {
            "task_id": 311,
            "text": "Write a python function to set the left most unset bit.",
            "code": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
        },
        {
            "task_id": 312,
            "text": "Write a function to find the volume of a cone.",
            "code": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
        },
        {
            "task_id": 313,
            "text": "Write a python function to print positive numbers in a list.",
            "code": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
        },
        {
            "task_id": 314,
            "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
            "code": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
        },
        {
            "task_id": 315,
            "text": "Write a python function to find the first maximum length of even word.",
            "code": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
        },
        {
            "task_id": 316,
            "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
            "code": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
        },
        {
            "task_id": 317,
            "text": "Write a function to reflect the modified run-length encoding from a list.",
            "code": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
        },
        {
            "task_id": 318,
            "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
            "code": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
        },
        {
            "task_id": 319,
            "text": "Write a function to find all five characters long word in the given string by using regex.",
            "code": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
        },
        {
            "task_id": 320,
            "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
            "code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
        },
        {
            "task_id": 321,
            "text": "Write a function to find the demlo number for the given number.",
            "code": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
        },
        {
            "task_id": 322,
            "text": "Write a function to find all index positions of the minimum values in a given list.",
            "code": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
        },
        {
            "task_id": 323,
            "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
            "code": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
        },
        {
            "task_id": 324,
            "text": "Write a function to extract the sum of alternate chains of tuples.",
            "code": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
        },
        {
            "task_id": 325,
            "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
            "code": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
        },
        {
            "task_id": 326,
            "text": "Write a function to get the word with most number of occurrences in the given strings list.",
            "code": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
        },
        {
            "task_id": 327,
            "text": "Write a function to print check if the triangle is isosceles or not.",
            "code": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
        },
        {
            "task_id": 328,
            "text": "Write a function to rotate a given list by specified number of items to the left direction.",
            "code": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
        },
        {
            "task_id": 329,
            "text": "Write a python function to count negative numbers in a list.",
            "code": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
        },
        {
            "task_id": 330,
            "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
            "code": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
        },
        {
            "task_id": 331,
            "text": "Write a python function to count unset bits of a given number.",
            "code": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
        },
        {
            "task_id": 332,
            "text": "Write a function to count character frequency of a given string.",
            "code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
        },
        {
            "task_id": 333,
            "text": "Write a python function to sort a list according to the second element in sublist.",
            "code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
        },
        {
            "task_id": 334,
            "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
            "code": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
        },
        {
            "task_id": 335,
            "text": "Write a function to find the sum of arithmetic progression.",
            "code": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
        },
        {
            "task_id": 336,
            "text": "Write a function to check whether the given month name contains 28 days or not.",
            "code": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
        },
        {
            "task_id": 337,
            "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
            "code": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
        },
        {
            "task_id": 338,
            "text": "Write a python function to count the number of substrings with same first and last characters.",
            "code": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
        },
        {
            "task_id": 339,
            "text": "Write a python function to find the maximum occuring divisor in an interval.",
            "code": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
        },
        {
            "task_id": 340,
            "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
            "code": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
        },
        {
            "task_id": 341,
            "text": "Write a function to convert the given set into ordered tuples.",
            "code": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
        },
        {
            "task_id": 342,
            "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
            "code": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
        },
        {
            "task_id": 343,
            "text": "Write a function to calculate the number of digits and letters in a string.",
            "code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
        },
        {
            "task_id": 344,
            "text": "Write a python function to find number of elements with odd factors in a given range.",
            "code": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
        },
        {
            "task_id": 345,
            "text": "Write a function to find the difference between two consecutive numbers in a given list.",
            "code": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
        },
        {
            "task_id": 346,
            "text": "Write a function to find entringer number e(n, k).",
            "code": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
        },
        {
            "task_id": 347,
            "text": "Write a python function to count the number of squares in a rectangle.",
            "code": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
        },
        {
            "task_id": 348,
            "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
            "code": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
        },
        {
            "task_id": 349,
            "text": "Write a python function to check whether the given string is a binary string or not.",
            "code": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
        },
        {
            "task_id": 350,
            "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
            "code": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
        },
        {
            "task_id": 351,
            "text": "Write a python function to find the first element occurring k times in a given array.",
            "code": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
        },
        {
            "task_id": 352,
            "text": "Write a python function to check whether all the characters in a given string are unique.",
            "code": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
        },
        {
            "task_id": 353,
            "text": "Write a function to remove a specified column from a given nested list.",
            "code": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
        },
        {
            "task_id": 354,
            "text": "Write a function to find t-nth term of arithemetic progression.",
            "code": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
        },
        {
            "task_id": 355,
            "text": "Write a python function to count the number of rectangles in a circle of radius r.",
            "code": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
        },
        {
            "task_id": 356,
            "text": "Write a function to find the third angle of a triangle using two angles.",
            "code": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
        },
        {
            "task_id": 357,
            "text": "Write a function to find the maximum element of all the given tuple records.",
            "code": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
        },
        {
            "task_id": 358,
            "text": "Write a function to find modulo division of two lists using map and lambda function.",
            "code": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
        },
        {
            "task_id": 359,
            "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
            "code": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
        },
        {
            "task_id": 360,
            "text": "Write a function to find the n\u00e2\u20ac\u2122th carol number.",
            "code": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
        },
        {
            "task_id": 361,
            "text": "Write a function to remove empty lists from a given list of lists.",
            "code": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
        },
        {
            "task_id": 362,
            "text": "Write a python function to find the item with maximum occurrences in a given list.",
            "code": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
        },
        {
            "task_id": 363,
            "text": "Write a function to add the k elements to each element in the tuple.",
            "code": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
        },
        {
            "task_id": 364,
            "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
            "code": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
        },
        {
            "task_id": 365,
            "text": "Write a python function to count the number of digits of a given number.",
            "code": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
        },
        {
            "task_id": 366,
            "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
            "code": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
        },
        {
            "task_id": 367,
            "text": "Write a function to check if a binary tree is balanced or not.",
            "code": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
        },
        {
            "task_id": 368,
            "text": "Write a function to repeat the given tuple n times.",
            "code": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
        },
        {
            "task_id": 369,
            "text": "Write a function to find the lateral surface area of cuboid",
            "code": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
        },
        {
            "task_id": 370,
            "text": "Write a function to sort a tuple by its float element.",
            "code": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
        },
        {
            "task_id": 371,
            "text": "Write a function to find the smallest missing element in a sorted array.",
            "code": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
        },
        {
            "task_id": 372,
            "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
            "code": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
        },
        {
            "task_id": 373,
            "text": "Write a function to find the volume of a cuboid.",
            "code": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
        },
        {
            "task_id": 374,
            "text": "Write a function to print all permutations of a given string including duplicates.",
            "code": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
        },
        {
            "task_id": 375,
            "text": "Write a function to round the given number to the nearest multiple of a specific number.",
            "code": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
        },
        {
            "task_id": 376,
            "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
            "code": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
        },
        {
            "task_id": 377,
            "text": "Write a python function to remove all occurrences of a character in a given string.",
            "code": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
        },
        {
            "task_id": 378,
            "text": "Write a python function to shift last element to first position in the given list.",
            "code": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
        },
        {
            "task_id": 379,
            "text": "Write a function to find the surface area of a cuboid.",
            "code": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
        },
        {
            "task_id": 380,
            "text": "Write a function to generate a two-dimensional array.",
            "code": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
        },
        {
            "task_id": 381,
            "text": "Write a function to sort a list of lists by a given index of the inner list.",
            "code": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
        },
        {
            "task_id": 382,
            "text": "Write a function to find the number of rotations in a circularly sorted array.",
            "code": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
        },
        {
            "task_id": 383,
            "text": "Write a python function to toggle all odd bits of a given number.",
            "code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
        },
        {
            "task_id": 384,
            "text": "Write a python function to find the frequency of the smallest value in a given array.",
            "code": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
        },
        {
            "task_id": 385,
            "text": "Write a function to find the n'th perrin number using recursion.",
            "code": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
        },
        {
            "task_id": 386,
            "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
            "code": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
        },
        {
            "task_id": 387,
            "text": "Write a python function to check whether the hexadecimal number is even or odd.",
            "code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
        },
        {
            "task_id": 388,
            "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
            "code": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
        },
        {
            "task_id": 389,
            "text": "Write a function to find the n'th lucas number.",
            "code": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
        },
        {
            "task_id": 390,
            "text": "Write a function to insert a given string at the beginning of all items in a list.",
            "code": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
        },
        {
            "task_id": 391,
            "text": "Write a function to convert more than one list to nested dictionary.",
            "code": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
        },
        {
            "task_id": 392,
            "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
            "code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
        },
        {
            "task_id": 393,
            "text": "Write a function to find the list with maximum length using lambda function.",
            "code": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
        },
        {
            "task_id": 394,
            "text": "Write a function to check if given tuple is distinct or not.",
            "code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
        },
        {
            "task_id": 395,
            "text": "Write a python function to find the first non-repeated character in a given string.",
            "code": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
        },
        {
            "task_id": 396,
            "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
            "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
        },
        {
            "task_id": 397,
            "text": "Write a function to find the median of three specific numbers.",
            "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
        },
        {
            "task_id": 398,
            "text": "Write a function to compute the sum of digits of each number of a given list.",
            "code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
        },
        {
            "task_id": 399,
            "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
            "code": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 400,
            "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
            "code": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
        },
        {
            "task_id": 401,
            "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
            "code": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 402,
            "text": "Write a function to compute the value of ncr%p.",
            "code": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
        },
        {
            "task_id": 403,
            "text": "Write a function to check if a url is valid or not using regex.",
            "code": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
        },
        {
            "task_id": 404,
            "text": "Write a python function to find the minimum of two numbers.",
            "code": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
        },
        {
            "task_id": 405,
            "text": "Write a function to check whether an element exists within a tuple.",
            "code": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
        },
        {
            "task_id": 406,
            "text": "Write a python function to find the parity of a given number.",
            "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
        },
        {
            "task_id": 407,
            "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
            "code": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
        },
        {
            "task_id": 408,
            "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
            "code": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
        },
        {
            "task_id": 409,
            "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
            "code": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
        },
        {
            "task_id": 410,
            "text": "Write a function to find the minimum value in a given heterogeneous list.",
            "code": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
        },
        {
            "task_id": 411,
            "text": "Write a function to convert the given snake case string to camel case string by using regex.",
            "code": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
        },
        {
            "task_id": 412,
            "text": "Write a python function to remove odd numbers from a given list.",
            "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
        },
        {
            "task_id": 413,
            "text": "Write a function to extract the nth element from a given list of tuples.",
            "code": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
        },
        {
            "task_id": 414,
            "text": "Write a python function to check whether the value exists in a sequence or not.",
            "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
        },
        {
            "task_id": 415,
            "text": "Write a python function to find a pair with highest product from a given array of integers.",
            "code": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
        },
        {
            "task_id": 416,
            "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
            "code": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
        },
        {
            "task_id": 417,
            "text": "Write a function to find common first element in given list of tuple.",
            "code": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
        },
        {
            "task_id": 418,
            "text": "Write a python function to find the sublist having maximum length.",
            "code": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
        },
        {
            "task_id": 419,
            "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
            "code": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
        },
        {
            "task_id": 420,
            "text": "Write a python function to find the cube sum of first n even natural numbers.",
            "code": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
        },
        {
            "task_id": 421,
            "text": "Write a function to concatenate each element of tuple by the delimiter.",
            "code": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
        },
        {
            "task_id": 422,
            "text": "Write a python function to find the average of cubes of first n natural numbers.",
            "code": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
        },
        {
            "task_id": 423,
            "text": "Write a function to solve gold mine problem.",
            "code": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
        },
        {
            "task_id": 424,
            "text": "Write a function to extract only the rear index element of each string in the given tuple.",
            "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
        },
        {
            "task_id": 425,
            "text": "Write a function to count the number of sublists containing a particular element.",
            "code": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
        },
        {
            "task_id": 426,
            "text": "Write a function to filter odd numbers using lambda function.",
            "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
        },
        {
            "task_id": 427,
            "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
            "code": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
        },
        {
            "task_id": 428,
            "text": "Write a function to sort the given array by using shell sort.",
            "code": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
        },
        {
            "task_id": 429,
            "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
            "code": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 430,
            "text": "Write a function to find the directrix of a parabola.",
            "code": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
        },
        {
            "task_id": 431,
            "text": "Write a function that takes two lists and returns true if they have at least one common element.",
            "code": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
        },
        {
            "task_id": 432,
            "text": "Write a function to find the median of a trapezium.",
            "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
        },
        {
            "task_id": 433,
            "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
            "code": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
        },
        {
            "task_id": 434,
            "text": "Write a function that matches a string that has an a followed by one or more b's.",
            "code": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
        },
        {
            "task_id": 435,
            "text": "Write a python function to find the last digit of a given number.",
            "code": "def last_Digit(n) :\r\n    return (n % 10) "
        },
        {
            "task_id": 436,
            "text": "Write a python function to print negative numbers in a list.",
            "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
        },
        {
            "task_id": 437,
            "text": "Write a function to remove odd characters in a string.",
            "code": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
        },
        {
            "task_id": 438,
            "text": "Write a function to count bidirectional tuple pairs.",
            "code": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
        },
        {
            "task_id": 439,
            "text": "Write a function to convert a list of multiple integers into a single integer.",
            "code": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
        },
        {
            "task_id": 440,
            "text": "Write a function to find all adverbs and their positions in a given sentence.",
            "code": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
        },
        {
            "task_id": 441,
            "text": "Write a function to find the surface area of a cube.",
            "code": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
        },
        {
            "task_id": 442,
            "text": "Write a function to find the ration of positive numbers in an array of integers.",
            "code": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
        },
        {
            "task_id": 443,
            "text": "Write a python function to find the largest negative number from the given list.",
            "code": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
        },
        {
            "task_id": 444,
            "text": "Write a function to trim each tuple by k in the given tuple list.",
            "code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
        },
        {
            "task_id": 445,
            "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
            "code": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
        },
        {
            "task_id": 446,
            "text": "Write a python function to count the occurence of all elements of list in a tuple.",
            "code": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
        },
        {
            "task_id": 447,
            "text": "Write a function to find cubes of individual elements in a list using lambda function.",
            "code": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
        },
        {
            "task_id": 448,
            "text": "Write a function to calculate the sum of perrin numbers.",
            "code": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
        },
        {
            "task_id": 449,
            "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
            "code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
        },
        {
            "task_id": 450,
            "text": "Write a function to extract specified size of strings from a give list of string values.",
            "code": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
        },
        {
            "task_id": 451,
            "text": "Write a function to remove all whitespaces from the given string using regex.",
            "code": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
        },
        {
            "task_id": 452,
            "text": "Write a function that gives loss amount if the given amount has loss else return none.",
            "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
        },
        {
            "task_id": 453,
            "text": "Write a python function to find the sum of even factors of a number.",
            "code": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
        },
        {
            "task_id": 454,
            "text": "Write a function that matches a word containing 'z'.",
            "code": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
        },
        {
            "task_id": 455,
            "text": "Write a function to check whether the given month number contains 31 days or not.",
            "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
        },
        {
            "task_id": 456,
            "text": "Write a function to reverse strings in a given list of string values.",
            "code": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
        },
        {
            "task_id": 457,
            "text": "Write a python function to find the sublist having minimum length.",
            "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
        },
        {
            "task_id": 458,
            "text": "Write a function to find the area of a rectangle.",
            "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
        },
        {
            "task_id": 459,
            "text": "Write a function to remove uppercase substrings from a given string by using regex.",
            "code": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
        },
        {
            "task_id": 460,
            "text": "Write a python function to get the first element of each sublist.",
            "code": "def Extract(lst): \r\n    return [item[0] for item in lst] "
        },
        {
            "task_id": 461,
            "text": "Write a python function to count the upper case characters in a given string.",
            "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
        },
        {
            "task_id": 462,
            "text": "Write a function to find all possible combinations of the elements of a given list.",
            "code": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
        },
        {
            "task_id": 463,
            "text": "Write a function to find the maximum product subarray of the given array.",
            "code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
        },
        {
            "task_id": 464,
            "text": "Write a function to check if all values are same in a dictionary.",
            "code": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
        },
        {
            "task_id": 465,
            "text": "Write a function to drop empty items from a given dictionary.",
            "code": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
        },
        {
            "task_id": 466,
            "text": "Write a function to find the peak element in the given array.",
            "code": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
        },
        {
            "task_id": 467,
            "text": "Write a python function to convert decimal number to octal number.",
            "code": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
        },
        {
            "task_id": 468,
            "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
            "code": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
        },
        {
            "task_id": 469,
            "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
            "code": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
        },
        {
            "task_id": 470,
            "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
            "code": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
        },
        {
            "task_id": 471,
            "text": "Write a python function to find remainder of array multiplication divided by n.",
            "code": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
        },
        {
            "task_id": 472,
            "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
            "code": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
        },
        {
            "task_id": 473,
            "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
            "code": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
        },
        {
            "task_id": 474,
            "text": "Write a function to replace characters in a string.",
            "code": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
        },
        {
            "task_id": 475,
            "text": "Write a function to sort counter by value.",
            "code": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
        },
        {
            "task_id": 476,
            "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
            "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
        },
        {
            "task_id": 477,
            "text": "Write a python function to convert the given string to lower case.",
            "code": "def is_lower(string):\r\n  return (string.lower())"
        },
        {
            "task_id": 478,
            "text": "Write a function to remove lowercase substrings from a given string.",
            "code": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
        },
        {
            "task_id": 479,
            "text": "Write a python function to find the first digit of a given number.",
            "code": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
        },
        {
            "task_id": 480,
            "text": "Write a python function to find the maximum occurring character in a given string.",
            "code": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
        },
        {
            "task_id": 481,
            "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
            "code": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
        },
        {
            "task_id": 482,
            "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
            "code": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
        },
        {
            "task_id": 483,
            "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
            "code": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
        },
        {
            "task_id": 484,
            "text": "Write a function to remove the matching tuples from the given two tuples.",
            "code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
        },
        {
            "task_id": 485,
            "text": "Write a function to find the largest palindromic number in the given array.",
            "code": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
        },
        {
            "task_id": 486,
            "text": "Write a function to compute binomial probability for the given number.",
            "code": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
        },
        {
            "task_id": 487,
            "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
            "code": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
        },
        {
            "task_id": 488,
            "text": "Write a function to find the area of a pentagon.",
            "code": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
        },
        {
            "task_id": 489,
            "text": "Write a python function to find the frequency of the largest value in a given array.",
            "code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
        },
        {
            "task_id": 490,
            "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
            "code": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
        },
        {
            "task_id": 491,
            "text": "Write a function to find the sum of geometric progression series.",
            "code": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
        },
        {
            "task_id": 492,
            "text": "Write a function to search an element in the given array by using binary search.",
            "code": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
        },
        {
            "task_id": 493,
            "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
            "code": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
        },
        {
            "task_id": 494,
            "text": "Write a function to convert the given binary tuple to integer.",
            "code": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
        },
        {
            "task_id": 495,
            "text": "Write a function to remove lowercase substrings from a given string by using regex.",
            "code": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
        },
        {
            "task_id": 496,
            "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
            "code": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
        },
        {
            "task_id": 497,
            "text": "Write a function to find the surface area of a cone.",
            "code": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
        },
        {
            "task_id": 498,
            "text": "Write a python function to find gcd of two positive integers.",
            "code": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
        },
        {
            "task_id": 499,
            "text": "Write a function to find the diameter of a circle.",
            "code": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
        },
        {
            "task_id": 500,
            "text": "Write a function to concatenate all elements of the given list into a string.",
            "code": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
        },
        {
            "task_id": 501,
            "text": "Write a python function to find common divisor between two numbers in a given pair.",
            "code": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
        },
        {
            "task_id": 502,
            "text": "Write a python function to find remainder of two numbers.",
            "code": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
        },
        {
            "task_id": 503,
            "text": "Write a function to add consecutive numbers of a given list.",
            "code": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
        },
        {
            "task_id": 504,
            "text": "Write a python function to find the cube sum of first n natural numbers.",
            "code": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
        },
        {
            "task_id": 505,
            "text": "Write a function to move all zeroes to the end of the given array.",
            "code": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
        },
        {
            "task_id": 506,
            "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
            "code": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
        },
        {
            "task_id": 507,
            "text": "Write a function to remove specific words from a given list.",
            "code": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
        },
        {
            "task_id": 508,
            "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
            "code": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
        },
        {
            "task_id": 509,
            "text": "Write a python function to find the average of odd numbers till a given odd number.",
            "code": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
        },
        {
            "task_id": 510,
            "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
            "code": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
        }
    ]
}